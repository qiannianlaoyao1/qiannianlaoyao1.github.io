<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qiannianlaoyao&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.qnlywhd.top/"/>
  <updated>2018-12-09T14:40:08.508Z</updated>
  <id>http://www.qnlywhd.top/</id>
  
  <author>
    <name>王浩东</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HDU 3397 线段树区间合并(巧用lazy标记)</title>
    <link href="http://www.qnlywhd.top/2018/12/09/HDU-3397-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6-%E5%B7%A7%E7%94%A8lazy%E6%A0%87%E8%AE%B0/"/>
    <id>http://www.qnlywhd.top/2018/12/09/HDU-3397-线段树区间合并-巧用lazy标记/</id>
    <published>2018-12-09T14:37:49.000Z</published>
    <updated>2018-12-09T14:40:08.508Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/09/HDU-3397-线段树区间合并-巧用lazy标记/2018-12-09 21-57-49屏幕截图.png" alt=""></p><a id="more"></a><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3397" target="_blank" rel="noopener">题目链接</a></p><p><img src="/2018/12/09/HDU-3397-线段树区间合并-巧用lazy标记/2018-12-09 21-58-11屏幕截图.png" alt=""></p><p><img src="/2018/12/09/HDU-3397-线段树区间合并-巧用lazy标记/2018-12-09 21-58-24屏幕截图.png" alt=""></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>​    给出01区间 5种操作 </p><p>​    0就是区间全置0 ，1区间全置1，2 区间反转0-1、1-0 ，3就是求区间有多少个1，4就是求最大连续1的长度</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我们可以维护0和1的左连续，右连续，最大连续</p><p>然后，有多少个1，我们直接维护就可以，就是左右1的和</p><p>然后，主要是区间反转 和 区间置01的关系 ，因为传递lazy的时候，他们直接有关系</p><p>反转是一个lazy 01，也是一个lazy</p><p>首先，我们可以发现，如果你的区间先反转，在置01的时候，我们可以发现，你以前的反转没有用了</p><p>因为，我已经覆盖了01，反转没用了 ，所以，我们在置01的时候，把之前的反转lazy清掉</p><p>在update的时候，如果是置01，就把lazy01标上，然后吧反转lazy=0</p><p>这样我们在处理pushdown，当一个区间有反转和又有区间覆盖的时候，一定是先覆盖了，在区间反转</p><p>所以，我们在 pushdown的时候 ，先把覆盖往下穿，因为你先覆盖啊在反转，所以先处理覆盖</p><p>在传覆盖的时候，同时再把反转标记清空</p><p>然后在处理反转，传递反转的时候，如果子区间有覆盖了，那么就是父区间刚才传递下去的覆盖</p><p>所以这个时候，直接把覆盖反转一下就可以了，否则，我们把反转lazy，反转一下就可以了</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> ls,rs,sum;</span><br><span class="line">    <span class="keyword">int</span> lazy;</span><br><span class="line">    <span class="keyword">int</span> ls2,rs2,sum2;</span><br><span class="line">    <span class="keyword">int</span> lazy01;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line">node shu[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shu[rt].ls = shu[rt&lt;&lt;<span class="number">1</span>].ls;</span><br><span class="line">    shu[rt].rs = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>].ls==(shu[rt&lt;&lt;<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>].l + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].ls += shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs==(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].rs += shu[rt&lt;&lt;<span class="number">1</span>].rs;</span><br><span class="line">    &#125;</span><br><span class="line">    shu[rt].sum = max(max(shu[rt&lt;&lt;<span class="number">1</span>].sum,shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum),</span><br><span class="line">                      shu[rt&lt;&lt;<span class="number">1</span>].rs+shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls);</span><br><span class="line">    shu[rt].ls2 = shu[rt&lt;&lt;<span class="number">1</span>].ls2;</span><br><span class="line">    shu[rt].rs2 = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs2;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>].ls2==(shu[rt&lt;&lt;<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>].l + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].ls2 += shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs2==(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].rs2 += shu[rt&lt;&lt;<span class="number">1</span>].rs2;</span><br><span class="line">    &#125;</span><br><span class="line">    shu[rt].sum2 = max(max(shu[rt&lt;&lt;<span class="number">1</span>].sum2,shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum2),</span><br><span class="line">                       shu[rt&lt;&lt;<span class="number">1</span>].rs2+shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls2);</span><br><span class="line">    shu[rt].num = shu[rt&lt;&lt;<span class="number">1</span>].num+shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shu[rt].l = l,shu[rt].r = r;</span><br><span class="line">    shu[rt].lazy = <span class="number">0</span>;</span><br><span class="line">    shu[rt].lazy01 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[l])</span><br><span class="line">        &#123;</span><br><span class="line">            shu[rt].ls = shu[rt].rs = shu[rt].sum = <span class="number">1</span>;</span><br><span class="line">            shu[rt].ls2 = shu[rt].rs2 = shu[rt].sum2 = <span class="number">0</span>;</span><br><span class="line">            shu[rt].num = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            shu[rt].ls = shu[rt].rs = shu[rt].sum = <span class="number">0</span>;</span><br><span class="line">            shu[rt].ls2 = shu[rt].rs2 = shu[rt].sum2 = <span class="number">1</span>;</span><br><span class="line">            shu[rt].num = <span class="number">0</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = shu[rt].lazy01;</span><br><span class="line">    <span class="keyword">int</span> len1 = shu[rt&lt;&lt;<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>].l +<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> len2 = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l +<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(v != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt&lt;&lt;<span class="number">1</span>].ls = shu[rt&lt;&lt;<span class="number">1</span>].rs = shu[rt&lt;&lt;<span class="number">1</span>].sum =  shu[rt&lt;&lt;<span class="number">1</span>].num = (v?len1:<span class="number">0</span>);</span><br><span class="line">        shu[rt&lt;&lt;<span class="number">1</span>].ls2 = shu[rt&lt;&lt;<span class="number">1</span>].rs2 = shu[rt&lt;&lt;<span class="number">1</span>].sum2 = (v?<span class="number">0</span>:len1);</span><br><span class="line">        shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].num =</span><br><span class="line">                                                (v?len2:<span class="number">0</span>);</span><br><span class="line">        shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls2 = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs2 = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum2 = (v?<span class="number">0</span>:len2);</span><br><span class="line">        shu[rt&lt;&lt;<span class="number">1</span>].lazy = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy = <span class="number">0</span> ; <span class="comment">//注销子区间的反转 因为有覆盖了</span></span><br><span class="line">        shu[rt&lt;&lt;<span class="number">1</span>].lazy01 = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy01 = v ;</span><br><span class="line">        shu[rt].lazy01 = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt].lazy)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>].lazy01&gt;=<span class="number">0</span>) <span class="comment">//覆盖反转覆盖 因为有覆盖不用看反转</span></span><br><span class="line">        &#123;</span><br><span class="line">            shu[rt&lt;&lt;<span class="number">1</span>].lazy01 = <span class="number">1</span> - shu[rt&lt;&lt;<span class="number">1</span>].lazy01;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> shu[rt&lt;&lt;<span class="number">1</span>].lazy ^= <span class="number">1</span>; <span class="comment">//否则反转反转标记</span></span><br><span class="line">        <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy01&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy01 = <span class="number">1</span> - shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy01;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy ^= <span class="number">1</span>;</span><br><span class="line">        shu[rt&lt;&lt;<span class="number">1</span>].num = len1 - shu[rt&lt;&lt;<span class="number">1</span>].num;</span><br><span class="line">        shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].num = len2 - shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].num;</span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>].ls,shu[rt&lt;&lt;<span class="number">1</span>].ls2);</span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>].rs,shu[rt&lt;&lt;<span class="number">1</span>].rs2);</span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>].sum,shu[rt&lt;&lt;<span class="number">1</span>].sum2);</span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls,shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls2);</span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs,shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs2);</span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum,shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum2);</span><br><span class="line">        shu[rt].lazy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = shu[rt].l, R = shu[rt].r;</span><br><span class="line">    <span class="keyword">if</span>(L==l&amp;&amp;R==r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> shu[rt].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = Find(rt&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = Find(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v1 = Find(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        <span class="keyword">int</span> v2 = Find(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">int</span> v3 = min(shu[rt&lt;&lt;<span class="number">1</span>].rs, mid-l+<span class="number">1</span>) + min(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls,r-mid<span class="number">-1</span>+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> v4 = max(v1,v2);</span><br><span class="line">        ans = max(v3,v4);</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = shu[rt].l, R = shu[rt].r;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=L&amp;&amp;R&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> shu[rt].num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(rt);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid) ans+=query(rt&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid) ans+= query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">        pushup(rt);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update01</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = shu[rt].l, R = shu[rt].r;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=L&amp;&amp;R&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(shu[rt].ls,shu[rt].ls2);</span><br><span class="line">            swap(shu[rt].rs,shu[rt].rs2);</span><br><span class="line">            swap(shu[rt].sum,shu[rt].sum2);</span><br><span class="line">            shu[rt].num = (R-L+<span class="number">1</span>) - shu[rt].num;</span><br><span class="line">            shu[rt].lazy ^=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k = R-L+<span class="number">1</span>;</span><br><span class="line">            shu[rt].ls = shu[rt].rs = shu[rt].sum = shu[rt].num = (val?k:<span class="number">0</span>);</span><br><span class="line">            shu[rt].ls2 = shu[rt].rs2 = shu[rt].sum2  =(val?<span class="number">0</span>:k);</span><br><span class="line">            shu[rt].lazy01 = val;</span><br><span class="line">            shu[rt].lazy = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(rt);</span><br><span class="line">        <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid) update01(rt&lt;&lt;<span class="number">1</span>,l,r,val);</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;r) update01(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,val);</span><br><span class="line">        pushup(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(shu,<span class="number">0</span>,<span class="keyword">sizeof</span>(shu));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;l,&amp;r);</span><br><span class="line">            l++,r++;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                update01(<span class="number">1</span>,l,r,x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(<span class="number">1</span>,l,r));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Find(<span class="number">1</span>,l,r));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/09/HDU-3397-线段树区间合并-巧用lazy标记/2018-12-09 21-57-49屏幕截图.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://www.qnlywhd.top/categories/ACM/"/>
    
    
      <category term="-线段树" scheme="http://www.qnlywhd.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>2018 ACM-ICPC 亚洲区域赛 北京站 A</title>
    <link href="http://www.qnlywhd.top/2018/12/07/2018-ACM-ICPC-%E4%BA%9A%E6%B4%B2%E5%8C%BA%E5%9F%9F%E8%B5%9B-%E5%8C%97%E4%BA%AC%E7%AB%99-A/"/>
    <id>http://www.qnlywhd.top/2018/12/07/2018-ACM-ICPC-亚洲区域赛-北京站-A/</id>
    <published>2018-12-07T14:25:08.000Z</published>
    <updated>2018-12-07T14:45:03.803Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/07/2018-ACM-ICPC-亚洲区域赛-北京站-A/2018-12-07 22-38-46屏幕截图.png" alt=""></p><a id="more"></a><h3 id="Jin-Yong’s-Wukong-Ranking-List"><a href="#Jin-Yong’s-Wukong-Ranking-List" class="headerlink" title="Jin Yong’s Wukong Ranking List"></a>Jin Yong’s Wukong Ranking List</h3><p>时间限制:1000ms</p><p>单点时限:1000ms</p><p>内存限制:512MB</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><strong>Jin Yong</strong> was the most famous and popular  Chinese wuxia (The one who fight bad people by his Wukong i.e. Wushu and  Kongfu) novelist who lived in Hong Kong. Between 1955 and 1972, he  wrote 14 novels which earned him a reputation as one of the greatest and  most popular Chinese writers. Over 100 million copies of his works have  been sold worldwide，not including a countless number of pirated copies.  Jin Yong’s works seem to have magic. Once you begin to read a novel of  his, you just can’t stop until you finish it.</p><p>Last month, Jin Yong  passed away at the age of 94. Many Jin Yong’s fans in PKU held a  meeting to memorize him. Jin Yong’s fans always like to discuss or argue  or even quarrel about whose Wukong are better among the wuxia  characters of his novel. During the meeting, this happened again:</p><p>Every  fans said some words like “Qiao Feng’s Wukong is better than Guo  Jing’s”. Obviously, those words may contradict each other and then cause  quarrels. As a boring and girlfriendless male programmer of EECS  school, you always want to make some things. So you are eager to point  out the contradictions as soon as possible. That means, you want to find  out the first one whose words contradict the words said by others  before him.</p><p>Please note that if A is better than B, and B is better than C, then of course A must be better than C.</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>There are no more than 15 test cases.</p><p>For each test case:</p><p>The first line is an integer n( 1 &lt;= n &lt;=20), meaning that there are n sentences.</p><p>The following n lines are those n sentences which is in the format below:</p><p>s1 s2</p><p>This  means someone said that s1’s Wukong was better than s2’s. Both s1 and  s2 are names of Jin Yong’s characters which consists of only English  letters. It’s guaranteed that s1 and s2 are different, and their length  is no more than 30. Names are case sensitive.</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>For each test case, print the first sentence which cause a contradiction. If there are no contradiction, print 0 instead.</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>DON’T try to figure out who are those names in the sample and waste your time.</p><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">BrokenReputation ExtinctNun</span><br><span class="line">HelloLaught EnvelopeNotFlat</span><br><span class="line">6</span><br><span class="line">LandOverWind LonelyLight</span><br><span class="line">FireMonk CutTheForest</span><br><span class="line">CutTheForest LookCrazy</span><br><span class="line">MakeFoxRush LetMeGo</span><br><span class="line">HeroAunt UniqueLand</span><br><span class="line">LookCrazy FireMonk</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">LookCrazy FireMonk</span><br></pre></td></tr></table></figure><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>​    给你人名 代表前者比后者强  求第一个出现错误的地方 人物强弱满足传递性，<code>A &gt; B，B &gt; C，A &gt; C</code></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>​    签到题，直接 map 映射一下hash 你会发现永远是小的数字比大的数字厉害，所以，当出现大的数字比小的数字厉害的时候就是第一个错误点，太水了，我还在想什么拓扑排序啥的，懵了半天，哈哈</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;m1;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        m1.clear();</span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> ans1 ,ans2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s1,s2;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">            <span class="keyword">if</span>(!m1[s1]) m1[s1] = tot++;</span><br><span class="line">            <span class="keyword">if</span>(!m1[s2]) m1[s2] = tot++;</span><br><span class="line">            <span class="keyword">if</span>(m1[s1]&gt;=m1[s2]&amp;&amp;flag==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                ans1 = s1;</span><br><span class="line">                ans2 = s2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans1&lt;&lt;<span class="string">" "</span>&lt;&lt;ans2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;m1;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        m1.clear();</span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> ans1 ,ans2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s1,s2;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">            <span class="keyword">if</span>(!m1[s1]) m1[s1] = tot++;</span><br><span class="line">            <span class="keyword">if</span>(!m1[s2]) m1[s2] = tot++;</span><br><span class="line">            <span class="keyword">if</span>(m1[s1]&gt;=m1[s2]&amp;&amp;flag==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                ans1 = s1;</span><br><span class="line">                ans2 = s2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans1&lt;&lt;<span class="string">" "</span>&lt;&lt;ans2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps ：</p><p>​    这个真的得说在现场系列了，当时把题看完队友老哥直接上去就AC了。过两天有时间的写个退役总结</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/07/2018-ACM-ICPC-亚洲区域赛-北京站-A/2018-12-07 22-38-46屏幕截图.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://www.qnlywhd.top/categories/ACM/"/>
    
    
      <category term="-思维" scheme="http://www.qnlywhd.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #525 (Div. 2) C</title>
    <link href="http://www.qnlywhd.top/2018/12/07/Codeforces-Round-525-Div-2-C/"/>
    <id>http://www.qnlywhd.top/2018/12/07/Codeforces-Round-525-Div-2-C/</id>
    <published>2018-12-07T13:33:45.000Z</published>
    <updated>2018-12-07T13:49:30.493Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/07/Codeforces-Round-525-Div-2-C/2018-12-07 21-33-38屏幕截图.png" alt=""></p><a id="more"></a><p><a href="http://codeforces.com/problemset/problem/1088/C" target="_blank" rel="noopener">题目链接</a></p><p><img src="/2018/12/07/Codeforces-Round-525-Div-2-C/home/coder/hexo/source/_posts/Codeforces-Round-525-Div-2-C/2018-12-07 21-36-19屏幕截图.png" alt=""></p><p>Examples</p><p>Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">7 6 3</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 1 1</span><br><span class="line">2 2 4</span><br></pre></td></tr></table></figure><p>Note</p><p>In the first sample, the array is already increasing so we don’t need any operations.</p><p>In the second sample:</p><p>In the first step: the array becomes [8,6,3]</p><p>In the second step: the array becomes [0,2,3]</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>​    给定一段序列，序列的大小是n，n最大2000，然后有两种操作，第一种是从1到第i位，区间加上一个数x</p><p>第二种操作，是区间1到第i为，区间取模一个数x，然后现在问你，对于给定的序列，能不能在n+1次操作后，</p><p>使得这个序列是严格递增的，如果可以输出操作数和每次操作的情况，</p><p>输出格式，1 x y ，2 x y ，1代表是加操作，2代表是取模，x代表1-x位操作，y代表数值</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>​    一开始想傻了还以为是每个点随便加呢，哈哈，我们可以这样想，题目已经给出暗示了，n+1次操作嘛，</p><p>那肯定是加了n次，最后一次取模得到结果呗，因为你不可能多次取模吧，那样太复杂了，我们要学着简化题目，</p><p>根据题目的信息，对题目化简，然后怎么处理呢，一开始我是正向的去想的，很麻烦，因为前面的数值会对后面的</p><p>造成影响，所以啊，我们从后往前考虑呗，先把最后一个数处理了，然后一直到第一个就行呗，中间记录一下过程</p><p>对于第i位，影响的是1-i-1 对吧，所以从后往前的时候维护一个sum 一直记录过去就行，然后最关键的是那个一次取模是什么样的呢</p><p>我们可以发现假如说我构造出的序列，最标准的是什么情况，从0 - n-1 吧 一定是严格递增的</p><p>所以我们可以考虑对n取模，然后其他的数都根据他来构造，每次看和n取模的关系，然后就可以了</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n)==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n+<span class="number">1</span>);</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            ll x1 = i-((a[i]+sum)%n);</span><br><span class="line">            <span class="keyword">if</span>(x1&lt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x1+=n;</span><br><span class="line">            &#125;</span><br><span class="line">            sum+=x1;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"1 %lld %lld\n"</span>,i+<span class="number">1</span>,x1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %lld %lld\n"</span>,n,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps：</p><p>​    要学会简化题目啊，根据题中信息来往上靠，对做题很有帮助啊！切记，切记！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/07/Codeforces-Round-525-Div-2-C/2018-12-07 21-33-38屏幕截图.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://www.qnlywhd.top/categories/ACM/"/>
    
    
      <category term="-思维" scheme="http://www.qnlywhd.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>HDU 4348 主席树区间更新在线</title>
    <link href="http://www.qnlywhd.top/2018/12/06/HDU-4348-%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%8C%BA%E9%97%B4%E6%9B%B4%E6%96%B0%E5%9C%A8%E7%BA%BF/"/>
    <id>http://www.qnlywhd.top/2018/12/06/HDU-4348-主席树区间更新在线/</id>
    <published>2018-12-06T14:36:41.000Z</published>
    <updated>2018-12-06T14:52:28.213Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/06/HDU-4348-主席树区间更新在线/2018-12-06 22-40-46屏幕截图.png" alt=""></p><a id="more"></a><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4348" target="_blank" rel="noopener">题目链接</a></p><p><img src="/2018/12/06/HDU-4348-主席树区间更新在线/2018-12-06 22-39-35屏幕截图.png" alt=""></p><p><img src="/2018/12/06/HDU-4348-主席树区间更新在线/2018-12-06 22-39-50屏幕截图.png" alt=""></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>​    给定区间 q查询l r  c l r 更新加d 然后带一个时间戳 加1 然后 h 询问l到r 在t时间戳 b 把时间戳改为t</p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>​    标准在线主席树啊，树上维护的不是权值线段树，而是对应的正常的树<br>然后，怎么处理区间更新呢 ，我们都知道，主席树是根据之前的树，来对之前的结点复用也好 </p><p>总之相当于多一颗树，我们单点修改的好说，只是影响一条链，但是区间更新怎么办 </p><p>我们可以想到打标记 lazy，但是我们怎么，更新的时候怎么pushup 呢，这个好处理 </p><p>我们可以发现 我们树从上往下的结构嘛，所以在递归的时候，可以把这个父节点的sum，直接更新</p><p>这样省去了pushup 其实也差不多，主要是 怎么处理pushdown 因为你没办法往下传lazy，</p><p>这样就会多开结点，相当于你多开了区间这么多结点，直接mle啊 </p><p>空间爆炸，所以我们要考虑 不pushdown，我们可以从上往下，对树遍历的时候，找完全是你要找的区间 </p><p>并且在树上有的，就是递归的时候 写三个的那种，</p><p>完全是左边r&lt;=mid 就在递归左，完全是右 l&gt;mid 就递归右 </p><p>然后，中间区间的话，在拆开递归，l到mid，mid+1到r</p><p>这样，更新的时候，判断l\==L，r==R，这样保证你更新的区间，一定是你要找的区间</p><p>然后对应的，我们在更新的时候，sum已经更新完了，加上你更新的值和对区间的影响长度，</p><p>即R-L+1，然后，我们呢把完全要找的区间打一个lazy</p><p>然后，在查询的时候，我们从上往下的时候，把所有要找的区间lazy算一下，加上去，</p><p>这样保证一定是对的，</p><p>举个例子 比如 1-10 我更新 1-7  那么 树上影响的区间</p><blockquote><p>1-10<br> 1-5，6-10<br> 6-8<br> 6-7</p></blockquote><p>这几个区间吧，我们在从上往下递归的时候，已经把他们的和都更新过了</p><p>然后，我们对于1-5，6-7 这几个区间打了lazy</p><p>然后当我们查询的时候，假如找1-4</p><p>因为和已经更新过了，所以 1-3的和直接返回就可以</p><p>然后找到4-5的时候，接下来递归4，这个时候</p><p>正常的操作是 pushdown 标记下传 ，但是我们可以不传标记，</p><p>直接把标记的值乘上要找的区间长度 ，加上就可以了</p><p>因为你是三个判断的那种递归，保证你找的区间一定是对应要找的长度，所以这样写没有问题</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">ll a[N] ;</span><br><span class="line"><span class="keyword">int</span> rt[N * <span class="number">35</span>], ls[N * <span class="number">35</span>], rs[N * <span class="number">35</span>];</span><br><span class="line">ll lazy[N*<span class="number">35</span>];</span><br><span class="line">ll sum [N * <span class="number">35</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = ++ tot;</span><br><span class="line">    sum[o] = a[l];</span><br><span class="line">    lazy[o] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    Build(ls[o], l, m);</span><br><span class="line">    Build(rs[o], m + <span class="number">1</span>, r);</span><br><span class="line">    sum[o] = sum[ls[o]] + sum[rs[o]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> last, <span class="keyword">int</span> L, <span class="keyword">int</span> R, ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = ++ tot;</span><br><span class="line">    ls[o] = ls[last];</span><br><span class="line">    rs[o] = rs[last];</span><br><span class="line">    lazy[o] = lazy[last];</span><br><span class="line">    sum[o] = sum[last]+val*(R-L+<span class="number">1</span>); <span class="comment">//把每个区间的增量都算上 这一步省去了pushup</span></span><br><span class="line">    <span class="keyword">if</span>(L==l&amp;&amp;r==R)</span><br><span class="line">    &#123;</span><br><span class="line">        lazy[o] += val; <span class="comment">//完全是要找区间的并且是完整的一个区间的更新lazy</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=m) update(ls[o],l,m,ls[last],L,R,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;m) update(rs[o],m+<span class="number">1</span>,r,rs[last],L,R,val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        update(ls[o],l,m,ls[last],L,m,val);</span><br><span class="line">        update(rs[o],m+<span class="number">1</span>,r,rs[last],m+<span class="number">1</span>,R,val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> ss, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[ss];</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = lazy[ss]*(R-L+<span class="number">1</span>); <span class="comment">// 每次往下找的时候 把这个区间的lazy对最后和的影响算一下 这一步省去了pushdown</span></span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=m) ans+=query(ls[ss],l,m,L,R);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;m) ans+=query(rs[ss],m+<span class="number">1</span>,r,L,R);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans+=query(ls[ss],l,m,L,m);</span><br><span class="line">        ans+=query(rs[ss],m+<span class="number">1</span>,r,m+<span class="number">1</span>,R);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,q;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sz = n;</span><br><span class="line">        Build(rt[<span class="number">0</span>],<span class="number">1</span>, sz);</span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">15</span>];</span><br><span class="line">        <span class="keyword">int</span> ql,qr;</span><br><span class="line">        <span class="keyword">while</span>(q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;ql, &amp;qr);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(rt[time],<span class="number">1</span>,sz,ql,qr));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'C'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ll val;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;ql, &amp;qr,&amp;val);</span><br><span class="line">                update(rt[time+<span class="number">1</span>],<span class="number">1</span>,sz,rt[time],ql,qr,val);</span><br><span class="line">                time++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'H'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> time1;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;ql, &amp;qr,&amp;time1);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(rt[time1],<span class="number">1</span>,sz,ql,qr));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'B'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;time);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/06/HDU-4348-主席树区间更新在线/2018-12-06 22-40-46屏幕截图.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://www.qnlywhd.top/categories/ACM/"/>
    
    
      <category term="-主席树" scheme="http://www.qnlywhd.top/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU 3911 线段树区间合并 延迟标记</title>
    <link href="http://www.qnlywhd.top/2018/12/06/HDU-3911-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6-%E5%BB%B6%E8%BF%9F%E6%A0%87%E8%AE%B0/"/>
    <id>http://www.qnlywhd.top/2018/12/06/HDU-3911-线段树区间合并-延迟标记/</id>
    <published>2018-12-06T10:16:08.000Z</published>
    <updated>2018-12-06T10:50:53.427Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/06/HDU-3911-线段树区间合并-延迟标记/2018-12-06 18-36-02屏幕截图.png" alt=""></p><a id="more"></a><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3911" target="_blank" rel="noopener">题目链接</a></p><p><img src="/2018/12/06/HDU-3911-线段树区间合并-延迟标记/2.png" alt=""></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>​    给定区间01，然后可以把区间0变1，1变0，然后求最大连续1的长度</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>正常的维护01区间，用lazy 来表示反转，多维护一个最大0的左连续，右连续，连续最大 </p><p>然后反转的时候，直接swap 一下就可以</p><p>但是有一个坑点，就是查找区间最大连续1的时候，如果是包含你要的区间</p><p>那就直接返回这个区间最大的值，如果是这个区间完全左边和右边的时候也直接递归就可以  </p><p>但是当在这个区间某一部分的时候，会有问题</p><p>比如 1-10 你找 2-8  你肯定要找到 1-5 和 6-10 对吧</p><p>但是，你分开区间的时候，你会把 1-5和6-10 区间连续的部分分开</p><p>所以，一定要考虑中间分开的连续区间</p><p>第一种就是完全包含直接返回，第二种完全右边和左边直接递归</p><p>第三种中间某部分分开的，比如 1-10，你找 2-8，1-10肯定没有了，</p><p>你要找1-5 和 6-10 里面的对吧，但是你分开的时候 1-5的右区间和6-10左区间连续被分开了</p><p>所以你要讨论一下 而且还要注意大小</p><p>因为 假设 1-10 找2-8 假设1-5 右连续贯穿 这个时候就比2大了 同理右儿子左连续也得比较一下</p><p>具体的看代码就行，主要来说就是你在往下递归这个树的时候，在分开的时候多考虑一下中间的情况</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> ls,rs,sum;</span><br><span class="line">    <span class="keyword">int</span> lazy;</span><br><span class="line">    <span class="keyword">int</span> ls2,rs2,sum2;</span><br><span class="line">&#125;;</span><br><span class="line">node shu[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shu[rt].ls = shu[rt&lt;&lt;<span class="number">1</span>].ls;</span><br><span class="line">    shu[rt].rs = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>].ls==(shu[rt&lt;&lt;<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>].l + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].ls += shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs==(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].rs += shu[rt&lt;&lt;<span class="number">1</span>].rs;</span><br><span class="line">    &#125;</span><br><span class="line">    shu[rt].sum = max(max(shu[rt&lt;&lt;<span class="number">1</span>].sum,shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum),shu[rt&lt;&lt;<span class="number">1</span>].rs+shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls);</span><br><span class="line"></span><br><span class="line">    shu[rt].ls2 = shu[rt&lt;&lt;<span class="number">1</span>].ls2;</span><br><span class="line">    shu[rt].rs2 = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs2;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>].ls2==(shu[rt&lt;&lt;<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>].l + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].ls2 += shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs2==(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].rs2 += shu[rt&lt;&lt;<span class="number">1</span>].rs2;</span><br><span class="line">    &#125;</span><br><span class="line">    shu[rt].sum2 = max(max(shu[rt&lt;&lt;<span class="number">1</span>].sum2,shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum2),shu[rt&lt;&lt;<span class="number">1</span>].rs2+shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shu[rt].l = l,shu[rt].r = r;</span><br><span class="line">    shu[rt].lazy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[l])</span><br><span class="line">        &#123;</span><br><span class="line">            shu[rt].ls = shu[rt].rs = shu[rt].sum = <span class="number">1</span>;</span><br><span class="line">            shu[rt].ls2 = shu[rt].rs2 = shu[rt].sum2 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            shu[rt].ls = shu[rt].rs = shu[rt].sum = <span class="number">0</span>;</span><br><span class="line">            shu[rt].ls2 = shu[rt].rs2 = shu[rt].sum2 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt].lazy)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>].ls,shu[rt&lt;&lt;<span class="number">1</span>].ls2);</span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>].rs,shu[rt&lt;&lt;<span class="number">1</span>].rs2);</span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>].sum,shu[rt&lt;&lt;<span class="number">1</span>].sum2);</span><br><span class="line"></span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls,shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls2);</span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs,shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs2);</span><br><span class="line">        swap(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum,shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum2);</span><br><span class="line"></span><br><span class="line">        shu[rt&lt;&lt;<span class="number">1</span>].lazy ^= shu[rt].lazy;</span><br><span class="line">        shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy ^= shu[rt].lazy;</span><br><span class="line">        shu[rt].lazy ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = shu[rt].l , R = shu[rt].r;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=L&amp;&amp;R&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(shu[rt].ls,shu[rt].ls2);</span><br><span class="line">        swap(shu[rt].rs,shu[rt].rs2);</span><br><span class="line">        swap(shu[rt].sum,shu[rt].sum2);</span><br><span class="line">        shu[rt].lazy ^=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(rt);</span><br><span class="line">        <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid) update(rt&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;r) update(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">        pushup(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = shu[rt].l, R = shu[rt].r;</span><br><span class="line">    <span class="keyword">if</span>(L==l&amp;&amp;R==r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> shu[rt].sum;</span><br><span class="line">    &#125;</span><br><span class="line">        pushdown(rt);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;=mid)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = Find(rt&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = Find(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v1 = Find(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">            <span class="keyword">int</span> v2 = Find(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">            <span class="keyword">int</span> v3 = min(shu[rt&lt;&lt;<span class="number">1</span>].rs, mid-l+<span class="number">1</span>) + min(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls,r-mid<span class="number">-1</span>+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> v4 = max(v1,v2);</span><br><span class="line">            ans = max(v3,v4);</span><br><span class="line">        &#125;</span><br><span class="line">        pushup(rt);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(shu,<span class="number">0</span>,<span class="keyword">sizeof</span>(shu));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;l,&amp;r);</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Find(<span class="number">1</span>,l,r));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                update(<span class="number">1</span>,l,r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/06/HDU-3911-线段树区间合并-延迟标记/2018-12-06 18-36-02屏幕截图.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://www.qnlywhd.top/categories/ACM/"/>
    
    
      <category term="-线段树" scheme="http://www.qnlywhd.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal 在事务中的使用</title>
    <link href="http://www.qnlywhd.top/2018/12/04/Threadlocal/"/>
    <id>http://www.qnlywhd.top/2018/12/04/Threadlocal/</id>
    <published>2018-12-04T08:53:14.000Z</published>
    <updated>2019-03-05T16:29:04.689Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/04/Threadlocal/1.jpg" alt=""></p><a id="more"></a><p>ThreadLocal </p><p>就是针对多个线程创建一个副本</p><p>每个线程都用自己的这个副本</p><p>就相当于一个线程的全局变量</p><p>这样多个线程用自己的不会影响</p><p>比如一个业务的事务怎么做到用一个连接</p><p>因为dao是单个的操作</p><p>这个时候可以用ThreadLocal</p><p>因为他是当前线程的全局变量</p><p>这样保证调用dao的业务执行时的数据库连接</p><p>是同一个</p><p>原理是每个线程维护一个map key是TheadLocal，value就是共享的值</p><p>每次都是对值进行改动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 管理事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; local = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>); </span><br><span class="line"><span class="comment">// 将连接存入threadLocal</span></span><br><span class="line">local.set(conn);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 回滚事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">Connection conn = local.get();</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">conn.close();</span><br><span class="line"><span class="comment">// 清空threadLocal</span></span><br><span class="line">local.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">Connection conn = local.get();</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">conn.commit();</span><br><span class="line"><span class="comment">// 清空threadLocal</span></span><br><span class="line">local.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">Connection conn = local.get();</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">conn.close();</span><br><span class="line"><span class="comment">// 清空threadLocal</span></span><br><span class="line">local.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取数据库连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> local.get();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个工具类，获取当前线程Threadlocal的值</p><p>然后接下的dao操作和service层的操作都靠这个获取链接数据库的对象即可</p><p>这样就保证一个业务的流程 由一个线程构成，然后也都是这一个连接池对象</p><p>以前总是不是很懂这个有什么用</p><p>现在终于明白了，就是一个全局线程共享变量</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/04/Threadlocal/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.qnlywhd.top/categories/Java/"/>
    
    
      <category term="-java" scheme="http://www.qnlywhd.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java1</title>
    <link href="http://www.qnlywhd.top/2018/12/04/java1/"/>
    <id>http://www.qnlywhd.top/2018/12/04/java1/</id>
    <published>2018-12-04T08:53:14.000Z</published>
    <updated>2018-12-04T11:36:19.458Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/04/java1/1.png" alt=""></p><p>Jdk包含jre ，jre包含jvm虚拟机</p><p>Jdk  (java 开发包) &gt; jre (java运行环境) &gt; jvm (java 虚拟机)</p><p><img src="/2018/12/04/java1/2.png" alt=""></p><p>有多少个类就会产生多少个 class 文件，public class 必须和文件名一致 </p><p>注释不能嵌套</p><hr><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>​    给我们类和方法变量起名，命名 以_ $ 字母开头，其他地方，数字 _  $  字母，不能为关键字</p><hr><h3 id="字符集和编码"><a href="#字符集和编码" class="headerlink" title="字符集和编码"></a>字符集和编码</h3><p>​    Unicode，两个字节一个字符，一字节八位 2的八次方，256个状态</p><p>两个字节 2的16，65536个字符，(汉字 两万个) 可以表示所有的</p><p><img src="/2018/12/04/java1/3.png" alt=""></p><p>编码和解码要一致，一般都是 gbk和unicode 发生冲突</p><p>Utf-8 既有一个又有两个字节  </p><hr><h3 id="变量和变量类型，转换"><a href="#变量和变量类型，转换" class="headerlink" title="变量和变量类型，转换"></a>变量和变量类型，转换</h3><p>​    <img src="/2018/12/04/java1/4.png" alt=""></p><p>​    </p><p><u><strong>引用类型四个字节：数组，对象，借口</strong></u></p><p><img src="/2018/12/04/java1/5.png" alt=""></p><p><img src="/2018/12/04/java1/6.png" alt=""></p><p>​    一字节八位</p><p><img src="/2018/12/04/java1/7.png" alt=""></p><p>二进制int 0b，八进制 int 0开头，16进制 0x  ，Intger.toBinaryString(int xx)  转换成二进制字符串</p><p>八进制. toOctalString，16进制 toHexString</p><p>直接给变量赋予数值的时候，如果数据大小没有超过byte short char 的表述的范围可已自动转换 </p><p>默认是int，<strong>如果给long的时候，在数字的后面加上l L</strong>，大小写都行，否则或报错，但是正常键盘输入</p><p>浮点数默认是 double的，所以直接将浮点数给float 会有报错 ，<strong>在数字后面加上f/F</strong> </p><p>Int 四个字节 完全表示范围的所有数</p><p>Float 也是四个字节 但是不是精确的表示所有小数 浮点数有误差比较的时候</p><p>最好用 Bigdecimal 大数类  BigInteger</p><p>Char 用的是 Unicode 表示的 用反斜杠\  转义字符  </p><blockquote><p>‘ ” \ 这个几个需要转义字符</p></blockquote><p>Char 运算是直接当作整数计算 a 对应 97  </p><p>Boolean 只占一位 而不是一个字节</p><p><img src="/2018/12/04/java1/8.png" alt=""></p><p>自动转换类型，容量小可以自动转为大的类型 </p><p><img src="/2018/12/04/java1/9.png" alt=""></p><p>在范围内强制转换可以用，超过范围 可以运行但是转换成无意义的值</p><p>Final常量最好用大写来写，中间用下划线分开</p><p><img src="/2018/12/04/java1/10.png" alt=""></p><p><strong>小数也可以取余数！</strong></p><p>&amp; 有0为0  | 有1为1  ~ 全取反  ^ 不一样为1 一样为0</p><p>三目运算符（布尔表达式）? A : B  </p><hr><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>Switch 里面可以放置 int 或者可以自动转换为int的类型 byte char short 枚举和String</p><p>多值选择的时候，我们选用switch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>（xx）</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">case</span> “字符串”：<span class="comment">//也可以上述那几种</span></span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">default</span>: <span class="comment">// 上述都不满足的时候</span></span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在语句里面，分支里面不放break，就会也加入判断里面，就是说你判断成功</p><p>但是不跳过，接着下次的判断了  </p><p>执行顺序：执行case，直到break为止，如果有default，也执行无论顺序</p><hr><p>带标签的break 和 continue  </p><p>Outer: 后面放循环语句</p><p>Continue outer 这时候就从这跳到标签那的语句</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/12/04/java1/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Jdk包含jre ，jre包含jvm虚拟机&lt;/p&gt;
&lt;p&gt;Jdk  (java 开发包) &amp;gt; jre (java运行环境) &amp;gt; jvm (java 虚拟机)&lt;/p
      
    
    </summary>
    
      <category term="Java" scheme="http://www.qnlywhd.top/categories/Java/"/>
    
    
      <category term="-java" scheme="http://www.qnlywhd.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>哈尔滨理工大学软件与微电子学院院赛高年级组A</title>
    <link href="http://www.qnlywhd.top/2018/12/04/%E5%93%88%E5%B0%94%E6%BB%A8%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E8%BD%AF%E4%BB%B6%E4%B8%8E%E5%BE%AE%E7%94%B5%E5%AD%90%E5%AD%A6%E9%99%A2%E9%99%A2%E8%B5%9B%E9%AB%98%E5%B9%B4%E7%BA%A7%E7%BB%84A/"/>
    <id>http://www.qnlywhd.top/2018/12/04/哈尔滨理工大学软件与微电子学院院赛高年级组A/</id>
    <published>2018-12-04T08:42:25.000Z</published>
    <updated>2018-12-04T08:43:51.752Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/04/哈尔滨理工大学软件与微电子学院院赛高年级组A/1.png" alt=""></p><a id="more"></a><p><a href="https://ac.nowcoder.com/acm/contest/301/A" target="_blank" rel="noopener">题目链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">时间限制：C/C++ 1秒，其他语言2秒</span><br><span class="line">空间限制：C/C++ 32768K，其他语言65536K</span><br><span class="line">64bit IO Format: %lld</span><br></pre></td></tr></table></figure><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>​    小乐乐得知一周有7天之后就对7产生了兴趣。 </p><p>​    小乐乐得到了两堆数字数字时连续的。 </p><p>​    第一堆包含[1,n]n个数字，第二堆包含[1,m]m个数字。</p><p>​    小乐乐想要从两堆中各挑选出一个整数x,y，使得x,y的和为7的倍数。</p><pre><code>请问小乐乐有多少种组合的方式。  </code></pre></blockquote><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入整数n,m。(1&lt;=n,m&lt;=1e6)</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出满足的对数。</span><br></pre></td></tr></table></figure><p> 示例1 </p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 7</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1,6),(2,5),(3,4),(4,3),(5,2),(6,1)</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>​    一开始智障了，考虑７的倍数之间的关系，然后暴力打了个表，断断续续的看了半天，</p><p>也没检查有没有错误，结果表打错了，还推了半天直接gg，最后才想明白怎么处理，</p><p>举个例子，我们要是暴力的处理就是 n^2 的　第一层枚举i，第二层枚j，然后 (i+j)%7==0</p><p>对吧，然后我们在去像怎么优化，举个例子　比如 1 29 里面有 1 6 ，1 13，1 20，1 27</p><p>我们可以写一下数学公式，设x，<strong>7*x - i &lt;= m</strong>  我们可以得到这个公式，里面x代表的是</p><p>7的几倍也就是几组7的倍数，要想x得到的最大 就取等于呗，化简公式：x = (m+i)/7;</p><p>然后只需要遍历一遍1-min(n,m)，枚举i就可以了，然后还有一个注意点就是公式要变成</p><p>x = (m+i)/7 - i/7 ;  举个例子 25 26  i = 7的时候 x 按照之前的结果是 4 但是实际只有 3个</p><p>因为你把 i/7 的情况多算了 就相当于多了一个 0 7 所以 要减去i自身的情况</p></blockquote><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minx = min(n,m);</span><br><span class="line">        <span class="keyword">int</span> maxn = max(n,m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=minx;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=((maxn+i)/<span class="number">7</span>-i/<span class="number">7</span>);</span><br><span class="line">            <span class="comment">//printf("%d %d\n",i,((maxn+i)/7-i/7));</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/04/哈尔滨理工大学软件与微电子学院院赛高年级组A/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://www.qnlywhd.top/categories/ACM/"/>
    
    
      <category term="思维" scheme="http://www.qnlywhd.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>HDU 4553 线段树区间合并</title>
    <link href="http://www.qnlywhd.top/2018/11/30/HDU-4553-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/"/>
    <id>http://www.qnlywhd.top/2018/11/30/HDU-4553-线段树区间合并/</id>
    <published>2018-11-30T13:58:19.000Z</published>
    <updated>2018-12-06T10:37:43.510Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/11/30/HDU-4553-线段树区间合并/1.png" alt=""></p><a id="more"></a><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4553" target="_blank" rel="noopener">题目链接 </a></p><p><img src="/2018/11/30/HDU-4553-线段树区间合并/2.png" alt=""></p><p><img src="/2018/11/30/HDU-4553-线段树区间合并/3.png" alt=""></p><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>​    有女神和屌丝两种朋友，屌丝每次申请x时间，女神每次也申请x时间，每次都找最靠左的时间  </p><p>然后女神优先级高于屌丝，可以覆盖屌丝的时间，但是，如果屌丝被覆盖的不完全，比如 1-5 是屌丝</p><p>然后女神占了1-3，剩下的4-5 还是屌丝的。        </p><hr><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>​    正常的线段树区间01维护，然后开两个树，一个维护屌丝的时间，一个维护女神的时间</p><p>屌丝就正常在屌丝的树上，维护 更新 ，然后女神的话，现在屌丝树上看 有没有地方 有地方就</p><p>更新屌丝树，然后如果没有地方的话 ，在女神树上找一段时间 找到了 在女神树和屌丝树都更新</p><p>一下因为有可能女神占用屌丝的时间 ，比之前的屌丝时间还多，所以需要更新一下。     </p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> ls,rs,sum;</span><br><span class="line">    <span class="keyword">int</span> lazy;</span><br><span class="line">&#125;;</span><br><span class="line">node shu[<span class="number">2</span>][N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> inx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shu[inx][rt].ls = shu[inx][rt&lt;&lt;<span class="number">1</span>].ls;</span><br><span class="line">    shu[inx][rt].rs = shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs;</span><br><span class="line">    <span class="keyword">if</span>(shu[inx][rt&lt;&lt;<span class="number">1</span>].ls==(shu[inx][rt&lt;&lt;<span class="number">1</span>].r - shu[inx][rt&lt;&lt;<span class="number">1</span>].l + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        shu[inx][rt].ls += shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs==(shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r - shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        shu[inx][rt].rs += shu[inx][rt&lt;&lt;<span class="number">1</span>].rs;</span><br><span class="line">    &#125;</span><br><span class="line">    shu[inx][rt].sum = max(max(shu[inx][rt&lt;&lt;<span class="number">1</span>].sum,shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum),shu[inx][rt&lt;&lt;<span class="number">1</span>].rs+shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> inx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(shu[inx][rt].lazy == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        shu[inx][rt&lt;&lt;<span class="number">1</span>].ls = shu[inx][rt&lt;&lt;<span class="number">1</span>].rs = shu[inx][rt&lt;&lt;<span class="number">1</span>].sum = (shu[inx][rt&lt;&lt;<span class="number">1</span>].r - shu[inx][rt&lt;&lt;<span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">        shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls = shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs = shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum = (shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r - shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        shu[inx][rt&lt;&lt;<span class="number">1</span>].lazy = shu[inx][rt].lazy;</span><br><span class="line">        shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy = shu[inx][rt].lazy;</span><br><span class="line">        shu[inx][rt].lazy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(shu[inx][rt].lazy == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        shu[inx][rt&lt;&lt;<span class="number">1</span>].ls = shu[inx][rt&lt;&lt;<span class="number">1</span>].rs = shu[inx][rt&lt;&lt;<span class="number">1</span>].sum = <span class="number">0</span>;</span><br><span class="line">        shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls = shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs = shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        shu[inx][rt&lt;&lt;<span class="number">1</span>].lazy = shu[inx][rt].lazy;</span><br><span class="line">        shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy = shu[inx][rt].lazy;</span><br><span class="line">        shu[inx][rt].lazy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> inx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shu[inx][rt].l = l,shu[inx][rt].r = r;</span><br><span class="line">    shu[inx][rt].lazy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        shu[inx][rt].ls = shu[inx][rt].rs = shu[inx][rt].sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(rt&lt;&lt;<span class="number">1</span>,l,mid,inx);</span><br><span class="line">    build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,inx);</span><br><span class="line">    pushup(rt,inx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val,<span class="keyword">int</span> inx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = shu[inx][rt].l , R = shu[inx][rt].r;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=L&amp;&amp;R&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val)</span><br><span class="line">        &#123;</span><br><span class="line">            shu[inx][rt].ls = shu[inx][rt].rs = shu[inx][rt].sum = R-L+<span class="number">1</span>;</span><br><span class="line">            shu[inx][rt].lazy = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            shu[inx][rt].ls = shu[inx][rt].rs = shu[inx][rt].sum = <span class="number">0</span>;</span><br><span class="line">            shu[inx][rt].lazy = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(rt,inx);</span><br><span class="line">        <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid) update(rt&lt;&lt;<span class="number">1</span>,l,r,val,inx);</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;r) update(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,val,inx);</span><br><span class="line">        pushup(rt,inx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> val,<span class="keyword">int</span> inx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(shu[inx][rt].ls == val) <span class="keyword">return</span> shu[inx][rt].l; <span class="comment">//当前区间最左边可以吗</span></span><br><span class="line">    <span class="keyword">if</span>(shu[inx][rt].sum&gt;=val) <span class="comment">//当前区间可以吗</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(rt,inx); <span class="comment">//下传</span></span><br><span class="line">        <span class="keyword">if</span>(shu[inx][rt&lt;&lt;<span class="number">1</span>].sum&gt;=val) <span class="keyword">return</span> Find(rt&lt;&lt;<span class="number">1</span>,val,inx); <span class="comment">//当前区间左儿子可以吗</span></span><br><span class="line">        <span class="keyword">if</span>(shu[inx][rt&lt;&lt;<span class="number">1</span>].rs+shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls &gt;=val) <span class="keyword">return</span> shu[inx][rt&lt;&lt;<span class="number">1</span>].r - shu[inx][rt&lt;&lt;<span class="number">1</span>].rs+<span class="number">1</span>; <span class="comment">// 当前区间分开的中间可以吗</span></span><br><span class="line">        <span class="keyword">if</span>(shu[inx][rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum&gt;=val) <span class="keyword">return</span> Find(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val,inx); <span class="comment">// 当前区间右儿子可以吗</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">int</span> kk = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(shu,<span class="number">0</span>,<span class="keyword">sizeof</span>(shu));</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">0</span>); <span class="comment">// 0代表ds树</span></span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>); <span class="comment">// 1代表ns树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,kk++);</span><br><span class="line">        <span class="keyword">char</span> s1[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1);</span><br><span class="line">            <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'D'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                <span class="keyword">int</span> ans = Find(<span class="number">1</span>,x,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(ans == <span class="number">0</span> ) <span class="built_in">printf</span>(<span class="string">"fly with yourself\n"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    update(<span class="number">1</span>,ans,ans+x<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d,let's fly\n"</span>,ans);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'N'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                <span class="keyword">int</span> ans = Find(<span class="number">1</span>,x,<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//printf("DS: %d\n",ans);</span></span><br><span class="line">                <span class="keyword">if</span>(ans == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> res = Find(<span class="number">1</span>,x,<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//printf("NS: %d\n",res);</span></span><br><span class="line">                    <span class="keyword">if</span>(res == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"wait for me\n"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        update(<span class="number">1</span>,res,res+x<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">                        update(<span class="number">1</span>,res,res+x<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d,don't put my gezi\n"</span>,res);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    update(<span class="number">1</span>,ans,ans+x<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                    update(<span class="number">1</span>,ans,ans+x<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d,don't put my gezi\n"</span>,ans);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'S'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l,r;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">                update(<span class="number">1</span>,l,r,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">                update(<span class="number">1</span>,l,r,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"I am the hope of chinese chengxuyuan!!\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.qnlywhd.top/">作者拥有版权，请注明出处转载！</a></p><p>如果觉得有什么疑惑或者博主代码有什么问题，可以通过关于我，加我QQ联系 ，感谢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/11/30/HDU-4553-线段树区间合并/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://www.qnlywhd.top/categories/ACM/"/>
    
    
      <category term="-线段树" scheme="http://www.qnlywhd.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>volatile</title>
    <link href="http://www.qnlywhd.top/2018/11/30/volatile/"/>
    <id>http://www.qnlywhd.top/2018/11/30/volatile/</id>
    <published>2018-11-30T13:58:19.000Z</published>
    <updated>2019-03-15T16:19:39.498Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/11/30/volatile/1.jpg" alt=""></p><a id="more"></a><p>volatile 修饰的共享变量，有两点特性</p><p>​    保证了不同线程对该变量操作的内存可见性</p><p>​    禁止指令重排序</p><p>java 中 所有的变量都存在主存中，每个线程又有自己的工作内存，</p><p>线程操作以工作内存为主，只能访问自己的工作内存，之后要把值同步到主内存中，</p><p>在执行的时候线程回去主存中读数据，然后加载到工作内存中，然后执行完在把值创给主存，主存的值就会更新</p><p>并发的三个特性：</p><p>​    原子性：表示操作不可终端，要么一定执行完，要么不执行</p><p>​    可见性：指的是一个线程修改数据，其他线程立刻能访问到</p><p>​    有序性：即程序执行的顺序按照代码的先后顺序执行 </p><p>volatile ：</p><p>​    是当变量修饰成volatile的时候，当读变量的时候，总是读到他的最新的值，不管那个线程对变量进行了写操作，都会立刻更新到主存中，</p><p>他保证了可见性和有序性，volatile限制了指令的重排序</p><p>当读一个volatile变量时，会把线程对于本地的内存置为无效，线程接下来将从主存中读取共享变量</p><p>但是他无法保证原子性，因为多个线程读去变量的时候，可能会被阻塞，</p><p>假设A读取值为10，被阻塞，B读取然后+1，就会变成11，</p><p>而因为A以及读到了数据，就不会去读最新的</p><p>volatile 底层机制：</p><p>​    在生成汇编代码的时候会在volatile关键字的代码之前会有一个lock指令</p><p>它保证了，重排序的时候不能把后面指令重排序到这个位置之前</p><p>​    会把cache写入内存</p><p>​    写入动作会使别的内存无效cache，相当于让别的线程去读新写入的数值</p><p>使用场景：</p><p>​    状态标记变量，因为对于标记变量只有赋值和读取，没有数据增加减少操作，会比上锁有一定效率提升</p><p>​    单例模式里面的双重检查锁定，可以用它来修饰，因为也是只涉及到了读取它的状态</p><p>双重检查 -&gt;多线程</p><p>如果你要共享的资源发生互斥的时候 并且是有判断什么时候结束</p><p>可以在已有锁的外面再加上一个上述的判断</p><p>这样当你已经满足这个判断的时候已经不用在进入锁住块的内部了</p><p>这样其他的线程在锁外的判断即满足 而不是在锁住等待了  </p><p>可以提高效率</p><p>但是这样还是有瑕疵</p><p>但是这个方法还是有问题的因为你创建变量 new 这个对象的时候 这个变量又可能还是null </p><p>当有一个线程正好到new 这个对象的时候  你突然来一个线程调用这个方法</p><p>这个时候上一个线程 new了这个对象 但是还没完全初始化构造函数的时候 </p><p>第二个线程会判断有这个对象 返回 然后第一个线程回来 发现还没new 利索 </p><p>继续new  这个时候 两个对象还是不一样地址</p><p><a href="http://www.qnlywhd.top/">作者拥有版权，请注明出处转载！</a></p><p>如果觉得有什么疑惑或者博主代码有什么问题，可以通过关于我，加我QQ联系 ，感谢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/11/30/volatile/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.qnlywhd.top/categories/java/"/>
    
    
      <category term="-并发" scheme="http://www.qnlywhd.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>一道特别有想法的题</title>
    <link href="http://www.qnlywhd.top/2018/11/30/%E4%B8%80%E9%81%93%E7%89%B9%E5%88%AB%E6%9C%89%E6%83%B3%E6%B3%95%E7%9A%84%E9%A2%98/"/>
    <id>http://www.qnlywhd.top/2018/11/30/一道特别有想法的题/</id>
    <published>2018-11-30T13:00:16.000Z</published>
    <updated>2018-11-30T13:54:53.655Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/11/30/一道特别有想法的题/1.png" alt=""></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><ol><li>初级：给定一段序列，序列的长度范围是1e5的，每个数的范围是正负1e9的，然后给出一个数值x，要你求这个序列里面一段连续的和且和的值为x，并且序列的长度越大越好</li><li>进阶：对于这个序列给出的数a[i]，只有0和1构成，求的是一段连续的区间里面的0和1的个数是相同的，并且长度越大越好</li><li>最终：对于这个序列给出的数可以是正负1e9的，然后求得还是一段连续的区间里面的0和1的个数是相同的，并且长度越大越好</li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>初级： 对于这个序列我们可以想到要找两个位置，<strong>i和j</strong>，i到j里面的和是x对吧，当然我们不能暴力的枚举两个位置，这样一定超时，我们可以发现可以用一个前缀和来优化求和的过程对吧，对于i到j的和不就是 <strong>sum[j]-sum[i]</strong>，sum代表前缀和，然而我们可以发现，我们需要的只是sum[i]的位置，这个位置我们也可以预处理一下，用一个map来表示前缀和这个数<strong>第一次</strong>出现的位置，这里为什么是第一次呢后面会再说。</p><p>​    然后对于这个序列我们先从前往后遍历不断累加一个和 sums 然后如果满足条件的话，一定有一个位置i从i到现在的sums 的位置也就是j 满足 <strong>sum[j]-sum[i] = x</strong> ，然而我们已经用map记录过</p><p>所以直接判断是不是出现过即可，出现过的话在更新一下最大长度即可</p><p>​    举个例子为什么是map只记录第一次的位置 比如 序列是 <code>2 3 -3</code>  这个时候前缀和是<code>2 5 2</code> 为什么只记录第一次呢，因为我们是从前往后遍历序列对吧，只记录第一次的位置这样保证长度一定是最长的！</p></li><li><p>进阶：其实我们可以根据上面的题来想想，如果我们把所有的0都换成-1，那么问题不就变成了给定序列找一段连续的和为0，并且长度最大吗？，问题解决了</p></li><li><p>最终：其实这个思路和上面的也是一样的，我们对于别的数字我们不看，对于我们有影响的只是0和1对吧，我们就在这里面看就可以，然后还是把0改成-1，然后就可以了</p></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">int</span>&gt;m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    LL x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;x)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        m[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        LL sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=a[i];</span><br><span class="line">            <span class="keyword">if</span>(m[sum]!=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> m[sum] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=a[i];</span><br><span class="line">            <span class="keyword">if</span>(m[sum-x]!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(m[sum-x]==<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    len = max(len,i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> len = max(len,i-m[sum-x]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>接下来的代码和上面的都差不多 就是无非把序列的数改一改，就不在赘述</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/11/30/一道特别有想法的题/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://www.qnlywhd.top/categories/ACM/"/>
    
    
      <category term="思维" scheme="http://www.qnlywhd.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.qnlywhd.top/2018/11/28/hello-world/"/>
    <id>http://www.qnlywhd.top/2018/11/28/hello-world/</id>
    <published>2018-11-28T11:23:22.782Z</published>
    <updated>2018-11-28T11:23:22.782Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HDU 3308 (线段树合并 求最大连续上升序列)</title>
    <link href="http://www.qnlywhd.top/2018/11/27/HDU-3308-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6-%E6%B1%82%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E4%B8%B2/"/>
    <id>http://www.qnlywhd.top/2018/11/27/HDU-3308-线段树合并-求最大连续子串/</id>
    <published>2018-11-27T14:00:31.000Z</published>
    <updated>2018-12-06T14:43:18.687Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2018/11/27/HDU-3308-线段树合并-求最大连续子串/3.png" alt=""></center><a id="more"></a><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3308" target="_blank" rel="noopener">题目链接 </a></p><p><img src="/2018/11/27/HDU-3308-线段树合并-求最大连续子串/1.png" alt=""></p><p><img src="/2018/11/27/HDU-3308-线段树合并-求最大连续子串/2.png" alt=""></p><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>​    给定一段区间求 最长连续上升序列长度  </p><p>​    两个操作 Q 操作区间查询最长连续上升子序列 U操作 单点更新</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>​     一般的区间合并问题，我算是发现了，都要维护三个基本参数</p><p>​    从左端开始的  从右端开始的  中间最大的</p><p>​    所以这个题 也不例外 维护左端开始的最长 和右端结束的最长 还有区间最长</p><p>​    然后 在记录一下这个区间的左右端点值 在合并的时候 需要比较</p><p>​    主要是如何pushup 首先往上更新的时候 最长的肯定是左右的最大的</p><p>​    然后 左端 判断是否贯穿 贯穿就是 左儿子右端点大于 右儿子左端点 这个时候</p><p>​    左端连续 要加上右儿子的左端连续</p><p>​    同理 右端连续也是这样 然后就可以了</p><p>​    然后 查找的时候 同样遵守之前的道理 你的区间要是分开的时候要判断一下</p><p>​    你分开的区间 左儿子的右端点和右儿子的左端点的大小比较一下</p><p>​    如果可以连续  我们比较一下 左右儿子的最大和 还有这个区间大小 </p><p>​    就是你不能超过这个区间的大小和之前的找01 最长1的那个是一个道理 </p><p>​    然后比较一个最大值就可以了</p><p>ps : 总感觉最正统的线段树往下递归的时候 都应该分三个写诶 以前两个的写法有点偷懒</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> ls,rs;</span><br><span class="line">    <span class="keyword">int</span> lsum,rsum,sumb;</span><br><span class="line">&#125;;</span><br><span class="line">node shu[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shu[rt].ls = shu[rt&lt;&lt;<span class="number">1</span>].ls;</span><br><span class="line">    shu[rt].rs = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rs;</span><br><span class="line">    shu[rt].sumb = max(shu[rt&lt;&lt;<span class="number">1</span>].sumb,shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sumb);</span><br><span class="line">    <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls&gt;shu[rt&lt;&lt;<span class="number">1</span>].rs)</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].sumb = max(shu[rt].sumb,(shu[rt&lt;&lt;<span class="number">1</span>].rsum + shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lsum));</span><br><span class="line">    &#125;</span><br><span class="line">    shu[rt].lsum = shu[rt&lt;&lt;<span class="number">1</span>].lsum;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt].lsum == (shu[rt&lt;&lt;<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>) &amp;&amp; shu[rt&lt;&lt;<span class="number">1</span>].rs&lt;shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls)</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].lsum += shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lsum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shu[rt].rsum = shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rsum;</span><br><span class="line">    <span class="keyword">if</span>(shu[rt].rsum == (shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r - shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>) &amp;&amp; shu[rt&lt;&lt;<span class="number">1</span>].rs&lt;shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls)</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].rsum += shu[rt&lt;&lt;<span class="number">1</span>].rsum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shu[rt].l = l,shu[rt].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].ls = shu[rt].rs = a[l];</span><br><span class="line">        shu[rt].lsum = shu[rt].rsum = shu[rt].sumb = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = shu[rt].l ,R = shu[rt].r;</span><br><span class="line">    <span class="keyword">if</span>(L==R&amp;&amp;L==pos)</span><br><span class="line">    &#123;</span><br><span class="line">        shu[rt].ls = shu[rt].rs = val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid) update(rt&lt;&lt;<span class="number">1</span>,pos,val);</span><br><span class="line">    <span class="keyword">else</span> update(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,val);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = shu[rt].l, R = shu[rt].r;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=L&amp;&amp;R&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> shu[rt].sumb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) ans = max(ans,Find(rt&lt;&lt;<span class="number">1</span>,l,r));</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) ans = max(ans,Find(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r));</span><br><span class="line">    <span class="keyword">if</span>(shu[rt&lt;&lt;<span class="number">1</span>].rs &lt; shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ls &amp;&amp; l&lt;=mid &amp;&amp; r&gt;mid )</span><br><span class="line">    &#123;</span><br><span class="line">        ans = max(ans , (min(shu[rt&lt;&lt;<span class="number">1</span>].rsum,mid-l+<span class="number">1</span>)+min(shu[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lsum,r-mid)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(shu,<span class="number">0</span>,<span class="keyword">sizeof</span>(shu));</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> s1[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>,s1,&amp;l,&amp;r);</span><br><span class="line">            <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                l++,r++;</span><br><span class="line">                <span class="keyword">int</span> x1 = Find(<span class="number">1</span>,l,r);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                l++;</span><br><span class="line">                update(<span class="number">1</span>,l,r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.qnlywhd.top/">作者拥有版权，请注明出处转载！</a></p><p>如果觉得有什么疑惑或者博主代码有什么问题，可以通过关于我，加我QQ联系 ，感谢。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2018/11/27/HDU-3308-线段树合并-求最大连续子串/3.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://www.qnlywhd.top/categories/ACM/"/>
    
    
      <category term="-线段树" scheme="http://www.qnlywhd.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
</feed>
